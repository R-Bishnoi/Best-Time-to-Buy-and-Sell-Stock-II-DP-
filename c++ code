

//memoization
/*
class Solution {
public:
    
  int solve(vector<vector<int>>&dp,vector<int>&arr,int ind,int buy){
      
      if(ind==arr.size())return 0;
      
      if(dp[ind][buy]!=-1)return dp[ind][buy];
    
    
      
      //buy means int buy=1
      //in buy you have 2 possibility either you buy the stock or not buy 
      
      if(buy==1)
          return dp[ind][buy]=max((-1*arr[ind]+solve(dp,arr,ind+1,0)),(0+solve(dp,arr,ind+1,1)));
      
      //sell means int buy=0
      //in sell you have 2 possibility either you sell the stock or not sell 
      else
          return dp[ind][buy]=max((arr[ind]+solve(dp,arr,ind+1,1)),(0+solve(dp,arr,ind+1,0)));
      
          
  }  
    
    
    
    
int maxProfit(vector<int>& arr) {
      
    int n=arr.size();
    
    vector<vector<int>>dp(n,vector<int>(2,-1));
    
    
    return solve(dp,arr,0,1); 
    
    }
        
};


*/









//tabulation
//buy and sell 2

/*
    
    
 class Solution {
public:   
    
int maxProfit(vector<int>& arr) {
      
    int n=arr.size();
    
    vector<vector<int>>dp(n+1,vector<int>(3,0));
    
    dp[n][0]=dp[n][1]=0;
    
    for(int ind= n-1; ind>=0;ind--){
        for(int buy=0;buy<=1;buy++){
        
            
            
             
      if(buy)
           dp[ind][buy]=max((-1*arr[ind]+ dp[ind+1][0]),dp[ind+1][1]);
      
     
      else
           dp[ind][buy]=max((arr[ind]+ dp[ind+1][1]),(0+dp[ind+1][0]));
   
            
        }
    }
    
    return dp[0][1];
    
   
    }
        
};


*/


